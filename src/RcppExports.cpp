// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// approx_likelihood
List approx_likelihood(const arma::vec& offset, const arma::vec& time, const arma::vec& status);
RcppExport SEXP _survtrans_approx_likelihood(SEXP offsetSEXP, SEXP timeSEXP, SEXP statusSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type status(statusSEXP);
    rcpp_result_gen = Rcpp::wrap(approx_likelihood(offset, time, status));
    return rcpp_result_gen;
END_RCPP
}
// calc_grad_hess
List calc_grad_hess(NumericVector lp, NumericMatrix x, NumericVector time, NumericVector status);
RcppExport SEXP _survtrans_calc_grad_hess(SEXP lpSEXP, SEXP xSEXP, SEXP timeSEXP, SEXP statusSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type lp(lpSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type time(timeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type status(statusSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_grad_hess(lp, x, time, status));
    return rcpp_result_gen;
END_RCPP
}
// close_update
arma::vec close_update(const arma::vec& z, const arma::vec& v, std::string penalty, double lambda, double gamma);
RcppExport SEXP _survtrans_close_update(SEXP zSEXP, SEXP vSEXP, SEXP penaltySEXP, SEXP lambdaSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type v(vSEXP);
    Rcpp::traits::input_parameter< std::string >::type penalty(penaltySEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(close_update(z, v, penalty, lambda, gamma));
    return rcpp_result_gen;
END_RCPP
}
// threshold_prox
arma::vec threshold_prox(const arma::vec& y, double vartheta, std::string penalty, double lambda, double gamma);
RcppExport SEXP _survtrans_threshold_prox(SEXP ySEXP, SEXP varthetaSEXP, SEXP penaltySEXP, SEXP lambdaSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type vartheta(varthetaSEXP);
    Rcpp::traits::input_parameter< std::string >::type penalty(penaltySEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(threshold_prox(y, vartheta, penalty, lambda, gamma));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_survtrans_approx_likelihood", (DL_FUNC) &_survtrans_approx_likelihood, 3},
    {"_survtrans_calc_grad_hess", (DL_FUNC) &_survtrans_calc_grad_hess, 4},
    {"_survtrans_close_update", (DL_FUNC) &_survtrans_close_update, 5},
    {"_survtrans_threshold_prox", (DL_FUNC) &_survtrans_threshold_prox, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_survtrans(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
